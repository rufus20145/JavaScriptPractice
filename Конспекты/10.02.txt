Методы и свойства у переменных примитивного типа в JS
    c(s1.length + " " + new String(s2).length); // явно преобразуем примитивный тип к объектному
    c(s1.length + " " + s2.length); // JS делает это за нас

Компиляторы и интерпретаторы
    что-то ==> движок ==> выполнение
    компилятор
        исходный код ==> компилятор ==> бинарный код ==> движок ==> процесс

    интерпретатор:
        исходный код ==> движок ==> процесс

    компиляция в момент выполнения (Runtime compilation)
        исходный код ==> [компилятор ==> процесс       ДВИЖОК]


Компиляция кода в JS
    см. рисунок

Функция typeof в JS
    строка          string
    число           number
    логический тип  boolean
    большие числа   bigint
    Null            object      одно из исключений
    Не определено   undefined
    Symbol          symbol
    объект          object
    массив          object
    функция         function    второе исключение
    

Тип Symbol в JS


Два способа обращения к свойствам объекта в JS
    var o = {};
    o.qqq = 1;
    o["kkk"] = 2;
    c(o);

    var propertyName = "zzz";
    o.propertyName; // обращение к свойству propertyName
    o[propertyName]; // обращение к свойству zzz

Геттеры и сеттеры
    доступ к данным напрямую запрещен => нужен посредник


Object.defineProperty
    